package com.example.mylogin.controller;


import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.mylogin.entity.User;
import com.example.mylogin.response.AuthResponse;
import com.example.mylogin.service.UserService;

import com.example.mylogin.authentication.JwtAuthenticationFilter;

@RestController
@CrossOrigin(origins = "http://localhost:4200")
@RequestMapping("/api/auth")

public class AuthController {

    @Autowired
    private UserService userService;

    // Static admin credentials
    private static final String ADMIN_EMAIL = "admin@example.com";
    private static final String ADMIN_PASSWORD = "admin123";

    @PostMapping("/login")
    public ResponseEntity<?> login(@RequestBody Map<String, Object> loginForm) {
        String email = (String) loginForm.get("email");
        String password = (String) loginForm.get("password");

        if (email != null && password != null) {
            if (email.equals(ADMIN_EMAIL) && password.equals(ADMIN_PASSWORD)) {
                // Admin authentication successful
                // Generate and return a JWT token with admin role
                String token = JwtAuthenticationFilter.generateToken(email);
                return ResponseEntity.ok(new AuthResponse(token));
            } else {
                User user = userService.findByEmail(email);
                if (user != null && validateCredentials(email, password)) {
                    // Student authentication successful
                    // Generate and return a JWT token with student role
                    String token = JwtAuthenticationFilter.generateToken(email);
                    return ResponseEntity.ok(new AuthResponse(token));
                }
            }
        }

        // User authentication failed
        return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Invalid credentials");
    }

    private boolean validateCredentials(String email, String password) {
        User user = userService.findByEmail(email);
        if (user != null) {
            String storedPassword = user.getPassword();
            
            // Compare the encrypted/hashed password
            // For example, using BCryptPasswordEncoder for password hashing
           BCryptPasswordEncoder passwordEncoder = new BCryptPasswordEncoder();
            return passwordEncoder.matches(password, storedPassword);
        }
        
        return false;
    }

    }

