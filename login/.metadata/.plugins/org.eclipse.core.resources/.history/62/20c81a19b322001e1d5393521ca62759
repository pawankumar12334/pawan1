package com.example.mylogin.controller;



import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.mylogin.entity.User;
import com.example.mylogin.response.AuthResponse;
import com.example.mylogin.service.UserService;

import com.example.mylogin.authentication.JwtAuthenticationFilter;

@RestController
@RequestMapping("/api/auth")
public class AuthController {

    @Autowired
    private UserService userService;

    @PostMapping("/login")
    public ResponseEntity<?> login(@RequestBody Map<String, Object> loginForm) {
        String email = (String) loginForm.get("email");
        String password = (String) loginForm.get("password");

        if (email != null && password != null) {
            User user = userService.findByEmail(email);
            if (user != null && validateCredentials(email, password)) {
                // User authentication successful
                // Generate and return a JWT token
                String token = JwtAuthenticationFilter.generateToken(email);
                return ResponseEntity.ok(new AuthResponse(token));
            }
        }
        // User authentication failed
        return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Invalid credentials");
    }

    private boolean validateCredentials(String email, String password) {
        // Implement your logic to validate the user's credentials based on email and password
        // Return true if the credentials are valid, otherwise false
        // Example: You can call your UserService to check if the email and password combination is correct
        // You can also integrate with your existing authentication mechanism
        
        // Example validation logic:
        User user = userService.findByEmail(email);
        return user != null && user.getPassword().equals(password);
    }
}
